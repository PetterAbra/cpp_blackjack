#include <string>
#include <iostream>

#include "class_blackjackGame.h"
#include "controlTypes.h"
#include "gameTypes.h"
#include "class_blackjackState.h"
#include "class_game.h"
#include "class_gambler.h"
#include "class_deck.h"
#include "class_blackjackAction.h"
#include "class_blackjackStrategy.h"
#include "class_action.h"

using namespace casino;
cards::deck s;
std::vector<cards::card> dealer;
std::vector<std::vector<cards::card> > dealt;


blackjackGame::blackjackGame(int players):game::game(casino::gameType[0], players)
{
    //making the number of players + 1 vectors
    blackjackGame::bets[players];
    dealt.reserve(players+1);
    if(players >7)
    {
        cards::deck q(players/6);
        s = q;
    }
    for(int i = 0; i<=players; i++)
    {
        if(i<players)
            bets[i] = 0;
        dealt.push_back(dealer);
    }
    start();
}

void blackjackGame::playRound()
{
    for(unsigned int i = 1; i<dealt.size(); i++)
    {
        blackjackState state(dealt, i, 0);
        gambler g = game::gamblers[i];
        std::cin.clear();
        if(!g.ready())
        {
            std::cout << g.name() << " is out of money.\nHow much do you want to set in the Blackjack Bank?";
            float money;
            std::cin >> money;
            std::cout << "\nThis round you will play with no bet\n";
            if(!std::cin.fail())
            {
                g.giveMoney(money);
                gamblers[i] = g;
                std::cin.clear();
                while( std::cin.get() != '\n' );
            }
            else
                std::cout << "\nI am sorry, but that didn't make sense\n";
        }
        if(blackjackGame::checkBlackjack(i))
        {
            std::cout << g.name() << " got blackjack and won\n";
            gambler g = game::gamblers[i];
            std::cout << "Player won: " << bets[i-1]*1.5 << " money\n";
        }
        else if(g.ready())
        {
            blackjackAction * action = (blackjackAction *) g.takeAction(&state);
            do
            {
                if(action->getAtype() == 0)
                {
                    dealt[i].push_back(s.deal());
                    std::cout << g.name() << " has chosen to hit\n";
                    if(blackjackGame::checkBusted(i))
                    {
                        std::cout << "and BUSTED with a score: " << blackjackGame::getScore(i) << std::endl;
                    }
                    else
                    {
                        blackjackState state(dealt, i, 0);
                        std::cout << "and got the score: " << blackjackGame::getScore(i) << std::endl;
                        action = (blackjackAction *) g.takeAction(&state);
                    }
                }
            }while(action->getAtype() == 0);

            if(action->getAtype() == 1)
            {
                std::cout << g.name() << " has chosen to stand" << std::endl;
                std::cout << "Got the score: " << blackjackGame::getScore(i) << std::endl;
            }
            else if(action->getAtype() == 2)
            {
                std::cout << "Split is not yet supported\n";
            }
            else if(action->getAtype() == 3)
            {
                std::cout << "Double is not yet supported\n";
            }
        }

    }
    std::cout << "Dealer got the cards: ";
    blackjackGame::dealerMove();
    dealer = dealt[0];
    for(unsigned int i = 0; i<dealer.size(); i++)
    {
        cards::card c = dealer[i];
        std::cout << c.name() << " ";
    }
    blackjackGame::winner();
}

void blackjackGame::start()
{
    char round;
    std::cout << "Want to play a round of blackjack? Y for yes, N for no\n";
    std::cin >> round;
    while(round == 'Y' || round == 'y')
    {
        for(unsigned int i = 1; i<game::gamblers.size(); i++)
        {
            gambler g = game::gamblers[i];
            bets[i-1] = g.placeBet();
            std::cout << g.name() << " betted: " << bets[i-1] << std::endl;
            game::gamblers[i] = g;
        }
        deal(dealt.size());
        playRound();
        std::cout << "\nWant to play a round of blackjack? Y for yes, N for no\n";
        std::cin.clear();
        while( std::cin.get() != '\n' );
        std::cin >> round;
    }
}

void blackjackGame::print()
{
    for(int i = 0; i<s.size(); i++)
    {
        cards::card q = s.deal();
        std::cout << q.name() << std::endl;
    }
    cards::deck g(4);
    s = g;
}

void blackjackGame::clearCards()
{
    for(unsigned int i = 0; i<dealt.size(); i++)
    {
        std::vector<cards::card> q;
        q = dealt[i];
        q.clear();
        dealt[i] = q;
    }
    cards::deck q(s.size()/52);
    s = q;
}

void blackjackGame::deal(int players)
{
    if(s.size() < 52)
        blackjackGame::clearCards();
    for(int i = 0; i<players; i++)
    {
        dealt[i].push_back(s.deal());
    }
    for(int i = 0; i<players; i++)
    {
        dealt[i].push_back(s.deal());
    }
}

bool blackjackGame::checkBusted(int player)
{
    if(blackjackGame::getScore(player) > 21)
        return true;
    return false;
}

bool blackjackGame::checkBlackjack(int player)
{
    //code to check if a player has scored a blackjack
    dealer = dealt[player];
    if(dealer.size() != 2)
        return false;
    char h, g;
    cards::card q = dealer[0];
    h = q.getRank();
    q = dealer[1];
    g = q.getRank();
    if((h=='T' || h=='J' || h=='Q' || h=='K') && g=='A')
        return true;
    if((g=='T' || g=='J' || g=='Q' || g=='K') && h=='A')
        return true;

    return false;
}

int blackjackGame::getScore(int player)
{
    dealer = dealt[player];
    int score = 0;
    bool ace = false;
    for(unsigned int i = 0; i < dealer.size(); i++)
    {
        cards::card q = dealer[i];
        int helper = blackjackGame::getValue(q.getRank());
        score += helper;
        if(helper > 10)
        {
            if(ace)
                score -= 10;
            ace = true;
        }
    }
    if(score > 21 && ace)
    {
        score -= 10;
    }
    return score;
}

int blackjackGame::getValue(char c)
{
    if(c == 'T' || c=='J' || c=='Q' || c=='K')
        return 10;

    switch(c)
    {
        case '2' : return 2;
        case '3' : return 3;
        case '4' : return 4;
        case '5' : return 5;
        case '6' : return 6;
        case '7' : return 7;
        case '8' : return 8;
        case '9' : return 9;
        case 'A' : return 11;
    }

    return 0;
}

void blackjackGame::dealerMove()
{
    while(getScore(0) < 17)
    {
        dealt[0].push_back(s.deal());
    }
}

void blackjackGame::winner()
{
    int dealerScore = getScore(0);
    for(unsigned int i = 1; i<game::gamblers.size(); i++)
    {
        gambler g = gamblers[i];
        int playerScore = getScore(i);
        if(blackjackGame::checkBlackjack(i))
        {
            g.giveMoney(bets[i-1] * 2.5);
            gamblers[i] = g;
        }
        else if(playerScore < 22 && (playerScore > dealerScore || dealerScore>21))
        {
            g.giveMoney(bets[i-1]*2);
            gamblers[i] = g;
            std::cout << "\n" << g.name() << " has beaten the dealer and won: ";
            std::cout << bets[i-1] << " money.\n";
        }
        else if(playerScore < 22 && playerScore == dealerScore)
        {
            g.giveMoney(bets[i-1]);
            gamblers[i] = g;
            std::cout << "\n" << g.name() << " are tied with the dealer\n";
        }
        else
        {
            std::cout << "\n" << g.name() << " lost against the dealer\n";
        }
    }
}
